# Generated by Django 4.2.16 on 2025-06-23 02:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "contact_number",
                    models.CharField(
                        blank=True,
                        help_text="Format: +56 9 XXXX XXXX or +569XXXXXXXX",
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: +56 9 XXXX XXXX",
                                regex="^\\+56\\s9\\s\\d{4}\\s\\d{4}$",
                            ),
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: +569XXXXXXXX",
                                regex="^\\+569\\d{8}$",
                            ),
                        ],
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Clothe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SHIRT", "Shirt"),
                            ("PANTS", "Pants"),
                            ("DRESS", "Dress"),
                            ("SHOES", "Shoes"),
                            ("JACKET", "Jacket"),
                            ("SWEATER", "Sweater"),
                            ("SHORTS", "Shorts"),
                            ("SKIRT", "Skirt"),
                            ("BLOUSE", "Blouse"),
                            ("HOODIE", "Hoodie"),
                            ("COAT", "Coat"),
                            ("JEANS", "Jeans"),
                            ("ACCESSORIES", "Accessories"),
                            ("POLERA", "Polera"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=20,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Upload clothing image file",
                        null=True,
                        upload_to="clothes/images/",
                    ),
                ),
                (
                    "image_url",
                    models.URLField(
                        blank=True,
                        help_text="External image URL (for scraped items)",
                        null=True,
                    ),
                ),
                (
                    "shopify_id",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Shopify product ID",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "gid",
                    models.CharField(
                        blank=True,
                        help_text="Shopify Global ID",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "vendor",
                    models.CharField(
                        blank=True,
                        help_text="Product vendor/brand",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Base price in CLP",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "variants",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Product variants with size, price, SKU info",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Store",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "contact_number",
                    models.CharField(
                        help_text="Format: +56 9 XXXX XXXX or +569XXXXXXXX",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: +56 9 XXXX XXXX",
                                regex="^\\+56\\s9\\s\\d{4}\\s\\d{4}$",
                            ),
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: +569XXXXXXXX",
                                regex="^\\+569\\d{8}$",
                            ),
                        ],
                    ),
                ),
                ("site_url", models.URLField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Outfit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating from 1 to 5",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "components",
                    models.ManyToManyField(
                        help_text="Clothing items that make up this outfit",
                        related_name="outfits",
                        to="api.clothe",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outfits",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "outfit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="api.outfit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="clothe",
            name="store",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clothes",
                to="api.store",
            ),
        ),
        migrations.AddField(
            model_name="clothe",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clothes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="clothe",
            index=models.Index(
                fields=["shopify_id"], name="api_clothe_shopify_940257_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clothe",
            index=models.Index(fields=["vendor"], name="api_clothe_vendor_1838ba_idx"),
        ),
        migrations.AddIndex(
            model_name="clothe",
            index=models.Index(fields=["type"], name="api_clothe_type_4e5c97_idx"),
        ),
        migrations.AddConstraint(
            model_name="clothe",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("store__isnull", True), ("user__isnull", False)),
                    models.Q(("store__isnull", False), ("user__isnull", True)),
                    _connector="OR",
                ),
                name="clothe_belongs_to_user_or_store",
            ),
        ),
    ]
